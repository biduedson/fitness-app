diff --git a/node_modules/react-native-snap-carousel/src/carousel/Carousel.js b/node_modules/react-native-snap-carousel/src/carousel/Carousel.js
index dae71a3..39d20db 100644
--- a/node_modules/react-native-snap-carousel/src/carousel/Carousel.js
+++ b/node_modules/react-native-snap-carousel/src/carousel/Carousel.js
@@ -11,6 +11,7 @@ import {
     stackAnimatedStyles,
     tinderAnimatedStyles
 } from '../utils/animations';
+import { ViewStyle } from 'react-native';
 
 const IS_IOS = Platform.OS === 'ios';
 
@@ -28,47 +29,47 @@ const IS_RTL = I18nManager.isRTL;
 export default class Carousel extends Component {
 
     static propTypes = {
-        data: PropTypes.array.isRequired,
-        renderItem: PropTypes.func.isRequired,
-        itemWidth: PropTypes.number, // required for horizontal carousel
-        itemHeight: PropTypes.number, // required for vertical carousel
-        sliderWidth: PropTypes.number, // required for horizontal carousel
-        sliderHeight: PropTypes.number, // required for vertical carousel
-        activeAnimationType: PropTypes.string,
-        activeAnimationOptions: PropTypes.object,
-        activeSlideAlignment: PropTypes.oneOf(['center', 'end', 'start']),
-        activeSlideOffset: PropTypes.number,
-        apparitionDelay: PropTypes.number,
-        autoplay: PropTypes.bool,
-        autoplayDelay: PropTypes.number,
-        autoplayInterval: PropTypes.number,
-        callbackOffsetMargin: PropTypes.number,
-        containerCustomStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
-        contentContainerCustomStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
-        enableMomentum: PropTypes.bool,
-        enableSnap: PropTypes.bool,
-        firstItem: PropTypes.number,
-        hasParallaxImages: PropTypes.bool,
-        inactiveSlideOpacity: PropTypes.number,
-        inactiveSlideScale: PropTypes.number,
-        inactiveSlideShift: PropTypes.number,
-        layout: PropTypes.oneOf(['default', 'stack', 'tinder']),
-        layoutCardOffset: PropTypes.number,
-        lockScrollTimeoutDuration: PropTypes.number,
-        lockScrollWhileSnapping: PropTypes.bool,
-        loop: PropTypes.bool,
-        loopClonesPerSide: PropTypes.number,
-        scrollEnabled: PropTypes.bool,
-        scrollInterpolator: PropTypes.func,
-        slideInterpolatedStyle: PropTypes.func,
-        slideStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
-        shouldOptimizeUpdates: PropTypes.bool,
-        swipeThreshold: PropTypes.number,
-        useScrollView: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-        vertical: PropTypes.bool,
-        onBeforeSnapToItem: PropTypes.func,
-        onSnapToItem: PropTypes.func
-    };
+data: PropTypes.array.isRequired,
+renderItem: PropTypes.func.isRequired,
+itemWidth: PropTypes.number, // necess치rio para o carrossel
+horizontal itemHeight: PropTypes.number, // necess치rio para o controle deslizante do carrossel
+verticalWidth: PropTypes.number, // necess치rio para o controle deslizante do carrossel
+horizontalHeight: PropTypes.number, // necess치rio para o carrossel
+vertical activeAnimationType: PropTypes.string,
+activeAnimationOptions: PropTypes.object,
+activeSlideAlignment: PropTypes.oneOf(['center', 'end', 'start']),
+activeSlideOffset: PropTypes.number,
+apparitionDelay: PropTypes.number,
+autoplay: PropTypes.bool,
+autoplayDelay: PropTypes.number,
+autoplayInterval: PropTypes.number,
+callbackOffsetMargin: PropTypes.number,
+containerCustomStyle: ViewStyle,
+contentContainerCustomStyle: ViewStyle,
+enableMomentum: PropTypes.bool,
+enableSnap: PropTypes.bool,
+firstItem: PropTypes.number,
+hasParallaxImages: PropTypes.bool,
+inactiveSlideOpacity: PropTypes.number,
+inactiveSlideScale: PropTypes.number,
+inactiveSlideShift: PropTypes.number,
+layout: PropTypes.oneOf(['default', 'stack', 'tinder']),
+layoutCardOffset: PropTypes.number,
+lockScrollTimeoutDuration: PropTypes.number,
+lockScrollWhileSnapping: PropTypes.bool,
+loop: PropTypes.bool,
+loopClonesPerSide: PropTypes.number,
+scrollEnabled: PropTypes.bool,
+scrollInterpolator: PropTypes.func,
+slideInterpolatedStyle: PropTypes.func,
+slideStyle: ViewStyle,
+shouldOptimizeUpdates: PropTypes.bool,
+swipeThreshold: PropTypes.number,
+useScrollView: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+vertical: PropTypes.bool,
+onBeforeSnapToItem: PropTypes.func,
+onSnapToItem: PropTypes.func
+};
 
     static defaultProps = {
         activeAnimationType: 'timing',
